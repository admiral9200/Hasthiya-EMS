"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpRequest = void 0;
const Fields_1 = require("./Fields");
const headersProxy_1 = require("./headersProxy");
const queryProxy_1 = require("./queryProxy");
class HttpRequest {
    constructor(options) {
        this.protocol = "https";
        this.hostname = "localhost";
        this.path = "/";
        this.query = {};
        this.headers = {};
        this.method = options.method || "GET";
        this.destination = HttpRequest.getDefaultDestination(options);
        this.fields = (0, headersProxy_1.headersToFields)(options.headers || {});
        this.body = options.body;
        const httpRequest = this;
        Object.defineProperties(httpRequest, {
            protocol: {
                enumerable: true,
                get() {
                    return httpRequest.destination.protocol;
                },
                set(protocol) {
                    httpRequest.destination.protocol = protocol;
                },
            },
            hostname: {
                enumerable: true,
                get() {
                    return httpRequest.destination.hostname;
                },
                set(hostname) {
                    httpRequest.destination.hostname = hostname;
                },
            },
            port: {
                enumerable: true,
                get() {
                    const port = httpRequest.destination.port;
                    return port ? Number(port) : undefined;
                },
                set(port) {
                    httpRequest.destination.port = String(port);
                },
            },
            path: {
                enumerable: true,
                get() {
                    return httpRequest.destination.pathname;
                },
                set(path) {
                    httpRequest.destination.pathname = path;
                },
            },
            query: {
                enumerable: true,
                get() {
                    return (0, queryProxy_1.getQueryProxy)(httpRequest.destination.searchParams);
                },
                set(query) {
                    const searchParams = (0, queryProxy_1.queryToSearchParams)(query || {});
                    httpRequest.destination.search = searchParams.toString();
                },
            },
            headers: {
                enumerable: true,
                get() {
                    return (0, headersProxy_1.getHeadersProxy)(httpRequest.fields);
                },
                set(headers) {
                    httpRequest.fields = (0, headersProxy_1.headersToFields)(headers);
                },
            },
        });
    }
    static from(options) {
        const request = new HttpRequest(options);
        if (options.destination) {
            request.destination = options.destination;
        }
        if (options.fields) {
            request.fields = options.fields;
        }
        return request;
    }
    static isInstance(request) {
        if (!request)
            return false;
        const req = request;
        return ("method" in req &&
            "protocol" in req &&
            "hostname" in req &&
            "path" in req &&
            typeof req["query"] === "object" &&
            typeof req["headers"] === "object");
    }
    clone() {
        return HttpRequest.from({
            ...this,
            destination: new URL(this.destination),
            fields: Fields_1.Fields.from(this.fields.getAll().map((field) => ({
                ...field,
                values: [...field.values],
            }))),
        });
    }
    static getDefaultDestination(options) {
        const protocol = options.protocol
            ? options.protocol.slice(-1) !== ":"
                ? `${options.protocol}:`
                : options.protocol
            : "https:";
        const hostname = options.hostname || "localhost";
        const port = options.port ? `:${String(options.port)}` : "";
        const path = options.path ? (options.path.charAt(0) !== "/" ? `/${options.path}` : options.path) : "/";
        const searchParams = (0, queryProxy_1.queryToSearchParams)(options.query || {});
        const url = new URL(`${protocol}//${hostname}${port}${path}`);
        url.search = searchParams.toString();
        return url;
    }
}
exports.HttpRequest = HttpRequest;
