"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.headerValueToFieldValues = exports.fieldsToHeaders = exports.headersToFields = exports.getHeadersProxy = void 0;
const Field_1 = require("./Field");
const FieldPosition_1 = require("./FieldPosition");
const Fields_1 = require("./Fields");
const getHeadersProxy = (fields) => {
    const headers = (0, exports.fieldsToHeaders)(fields);
    return new Proxy(headers, {
        set(target, property, newValue) {
            if (newValue == null)
                return true;
            Reflect.set(target, property, newValue);
            const field = new Field_1.Field({ name: property, values: (0, exports.headerValueToFieldValues)(newValue) });
            fields.setField(field);
            return true;
        },
        defineProperty(target, property, attributes) {
            const { configurable, enumerable, writable, value } = attributes;
            if (configurable && enumerable && writable && value != null) {
                Reflect.defineProperty(target, property, attributes);
                const field = new Field_1.Field({ name: property, values: (0, exports.headerValueToFieldValues)(value) });
                fields.setField(field);
            }
            return true;
        },
        deleteProperty(target, property) {
            Reflect.deleteProperty(target, property);
            fields.removeField(property);
            return true;
        },
    });
};
exports.getHeadersProxy = getHeadersProxy;
const headersToFields = (headers) => {
    return Fields_1.Fields.from(Object.entries(headers)
        .filter(([, value]) => value != null)
        .map(([key, value]) => ({ name: key, values: (0, exports.headerValueToFieldValues)(value), kind: FieldPosition_1.FieldPosition.HEADER })));
};
exports.headersToFields = headersToFields;
const fieldsToHeaders = (fields) => {
    return fields
        .getByType(FieldPosition_1.FieldPosition.HEADER)
        .reduce((headers, field) => ({ ...headers, [field.name]: field.values.join(",") }), {});
};
exports.fieldsToHeaders = fieldsToHeaders;
const headerValueToFieldValues = (headerValue) => {
    if (headerValue == null)
        return undefined;
    return String(headerValue).split(",");
};
exports.headerValueToFieldValues = headerValueToFieldValues;
